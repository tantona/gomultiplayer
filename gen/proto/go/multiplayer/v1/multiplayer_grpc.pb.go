// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: multiplayer/v1/multiplayer.proto

package multiplayer_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	GetMessageStream(ctx context.Context, in *GetMessageStreamRequest, opts ...grpc.CallOption) (MessageService_GetMessageStreamClient, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (MessageService_SendMessageClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetMessageStream(ctx context.Context, in *GetMessageStreamRequest, opts ...grpc.CallOption) (MessageService_GetMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], "/multiplayer.v1.MessageService/GetMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceGetMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_GetMessageStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageServiceGetMessageStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceGetMessageStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (MessageService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], "/multiplayer.v1.MessageService/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SendMessageClient interface {
	Recv() (*SendMessageResponse, error)
	grpc.ClientStream
}

type messageServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceSendMessageClient) Recv() (*SendMessageResponse, error) {
	m := new(SendMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations should embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	GetMessageStream(*GetMessageStreamRequest, MessageService_GetMessageStreamServer) error
	SendMessage(*SendMessageRequest, MessageService_SendMessageServer) error
}

// UnimplementedMessageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) GetMessageStream(*GetMessageStreamRequest, MessageService_GetMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessageStream not implemented")
}
func (UnimplementedMessageServiceServer) SendMessage(*SendMessageRequest, MessageService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_GetMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).GetMessageStream(m, &messageServiceGetMessageStreamServer{stream})
}

type MessageService_GetMessageStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageServiceGetMessageStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceGetMessageStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SendMessage(m, &messageServiceSendMessageServer{stream})
}

type MessageService_SendMessageServer interface {
	Send(*SendMessageResponse) error
	grpc.ServerStream
}

type messageServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceSendMessageServer) Send(m *SendMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiplayer.v1.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessageStream",
			Handler:       _MessageService_GetMessageStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMessage",
			Handler:       _MessageService_SendMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "multiplayer/v1/multiplayer.proto",
}

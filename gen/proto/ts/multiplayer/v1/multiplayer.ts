/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: multiplayer/v1/multiplayer.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace multiplayer.v1 {
    export enum MessageType {
        UNSPECIFIED = 0,
        UPDATE_PLAYER_DATA = 1,
        UPDATE_GAME_STATE = 2,
        SET_CLIENT_ID = 3,
        DISCONNECT_CLIENT = 4,
        CLIENT_ADDED = 5
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: MessageType;
            data?: string;
            client_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as MessageType;
        }
        set type(value: MessageType) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get client_id() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            type?: MessageType;
            data?: string;
            client_id?: string;
        }): Message {
            const message = new Message({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: MessageType;
                data?: string;
                client_id?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type !== undefined)
                writer.writeEnum(1, this.type);
            if (typeof this.data === "string" && this.data.length)
                writer.writeString(2, this.data);
            if (typeof this.client_id === "string" && this.client_id.length)
                writer.writeString(3, this.client_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.data = reader.readString();
                        break;
                    case 3:
                        message.client_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class SendMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getWrapperField(this, Message, 1) as Message;
        }
        set message(value: Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            message?: ReturnType<typeof Message.prototype.toObject>;
        }): SendMessageRequest {
            const message = new SendMessageRequest({});
            if (data.message != null) {
                message.message = Message.fromObject(data.message);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: ReturnType<typeof Message.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message !== undefined)
                writer.writeMessage(1, this.message, () => this.message.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessageRequest {
            return SendMessageRequest.deserialize(bytes);
        }
    }
    export class SendMessageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): SendMessageResponse {
            const message = new SendMessageResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessageResponse {
            return SendMessageResponse.deserialize(bytes);
        }
    }
    export class GetMessageStreamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): GetMessageStreamRequest {
            const message = new GetMessageStreamRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMessageStreamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMessageStreamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMessageStreamRequest {
            return GetMessageStreamRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMessageServiceService {
        static definition = {
            GetMessageStream: {
                path: "/multiplayer.v1.MessageService/GetMessageStream",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetMessageStreamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetMessageStreamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Message) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes))
            },
            SendMessage: {
                path: "/multiplayer.v1.MessageService/SendMessage",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: SendMessageRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SendMessageRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SendMessageResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SendMessageResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetMessageStream(call: grpc_1.ServerWritableStream<GetMessageStreamRequest, Message>): void;
        abstract SendMessage(call: grpc_1.ServerWritableStream<SendMessageRequest, SendMessageResponse>): void;
    }
    export class MessageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMessageServiceService.definition, "MessageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetMessageStream: GrpcStreamServiceInterface<GetMessageStreamRequest, GetMessageStreamRequest> = (message: GetMessageStreamRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetMessageStreamRequest> => {
            return super.GetMessageStream(message, metadata, options);
        };
        SendMessage: GrpcStreamServiceInterface<SendMessageRequest, SendMessageRequest> = (message: SendMessageRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<SendMessageRequest> => {
            return super.SendMessage(message, metadata, options);
        };
    }
}
